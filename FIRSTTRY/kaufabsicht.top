outputmacro: ^dbFirst($_arg1)
	    Ich kann dir folgendes anbieten: $_arg1
		

topic: ~kaufabsicht keep (~kaufen)



u: INTRO (~kaufen) Du möchtest also etwas kaufen, sehe ich das richtig?

	#! Ich suche / will kaufen / shop
	a: ( _~yes ) $introyes = _0 if (^dbinit(dbname = Uni-Shop port = 5432 user = postgres password = 1234)) {In diesem Fall kann ich dir dabei helfen, was aus dem Uni-Shop zu suchen, $kunde.}
                  else {dbinit failed - $$db_error}

	# introyes nur um zu bestätigen, dass auch "JA" gesagt wurde!

	#! Nein.
	a: ( ~no ) Tut mir Leid, ich kann eigentlich nur beraten. Sicher, dass du nicht doch etwas aus dem Uni-Shop suchst?
	    #! Ja.
	    b: ( ~yes ) Schön zu hören. ^reuse( INTRO )
	    #! Nein.
	    b: ( ~no ) Das ist schade.
		# Hiernach muss sollte man einen Schluss implementieren.

u: FIRSTQ ($introyes) Wir können nach einem Geschenk suchen oder einen Artikel für einen bestimmten Zweck. Was möchtest du?
    a: (_~geschenkidee) $geschenkidee = _0 $anwendungszweck = null Du suchst nach einem Geschenk. ^gambit( ~keyexgeschenk )
           # if (^dbexecute(^"SELECT DISTINCT geschenkidee FROM geschenk;" '^dbFirst )) { completed.}
            #		   else {dbexecute failed list from table- $$db_error}
	 # ^reuse( FIRSTQ )
	 # HIER BITTE NOCH KEINE QUERY!

	 #! besonderer Zweck
	 a: (_~anwendungszweck) $anwendungszweck = _0 $geschenkidee = null Du hast also einen bestimmten Zweck im Sinn. ^gambit( ~keyexanwendung )



	
u: SUMMARY1 () Ich fasse zusammen: Du wolltest ein Geschenk. Es handelt sich hier um ein $things bzw. ein $art mit $ausf als ausführung und maximal kosten tut es $preis. Stimmt das?
	a: (~yes) $gosearch = _0 Alles klar! Ich such mal im Shop # ab hier Datenbanksuche ^gambit( ~dbsearch )
	a: (~no) Okay. Fangen wir von vorn an ^reuse( ASKNAME ) # I need this to back to ASKNAME and run procedures again
	a: () $gosearch = 1 Alles klar! Ich such mal im Shop # ab hier Datenbanksuche ^gambit( ~dbsearch )

#! Ausführung nur wenn anwendungszweck nicht null!	
topic: ~keyexanwendung keep (~anwendungszweck) []

t: (~anwendungszweck) Debug: Reminder, Anwedungszweck nach $anwendungszweck . Geschenk war $geschenkidee 

u: ASKNAME () Ich will dir bei der Produktsuche helfen. Weißt du, wie der Artikel heißt, den du du suchst?
	a:  ( _~things ) $things = _0 Alles klar, ein $things.  
	a: (~no) $things = null Kein Thema, dafür bin ja da. 
	a: () $things = null Ich konnte leider nichts mit deiner Eingabe anfangen. Egal, versuchen wirs mal weiter! 

u: ART (!$things) Weißt du zumindest, was für eine Art von Ding du willst? # Wenn für $things nix da ist, dann ART.
	a: (_~art) $art = _0 Also ein $art. Gut, machen wir weiter!
	a: () Okay. Versuchen wir es weiter!
	
u: AUSF () Kannst du was zur Ausführung sagen? Welche sprache oder farbe hat es? 
	a: (_~ausfuehrung) $ausfuehrung = _0 Alles klar, es ist $ausfuehrung
	a: () Okay. 
	
u: PRICE () Wie viel soll es denn maximal kosten?
	a: (_~positiveinteger) $preis = _0 Es soll maximal $preis kosten 
	a: () Wir konnten keinen Preis feststellen

#! Nur wenn es auch einen Anwedungszweck gibt - so habe den Bug behoben, der nach SUMMARY1 zu SUMMARY2 springt	
#! gosearch muss einen Wert haben, damit die Datenbanksuche erfolgt. 
#! gosearch soll also verhindern, dass ohne NLI eine Datenbanksuche erfolgt
u: SUMMARY2 ($anwendungszweck) Ich fasse zusammen: Du suchtest nach Zweck. Es handelt sich hier um ein $things bzw. ein $art mit $ausf als ausführung und maximal kostet es $preis. Stimmt das?
	a: (~yes) $gosearch = _0 Alles klar! Ich such mal im Shop # ab hier Datenbanksuche ^gambit( ~dbsearch )
	a: (~no) Okay. Fangen wir von vorn an ^reuse( ASKNAME ) # I need this to back to ASKNAME and run procedures again
	a: () $gosearch = 1 Alles klar! Ich such mal im Shop # ab hier Datenbanksuche ^gambit( ~dbsearch )
	
	
# hiernach muss die DB folgen. Oberes als erster ansatz zum NLI - da ich noch nicht weiß, wie ich das ganze in einem Satz bearbeite. 
# Was ich aber machen würde ist alles, wozu es keine angabe gibt einfach mit $null abspeichern
# Aber mit den Daten sollte sich arbeiten lassen 
# Variablen sind: $things $art $ausfuehrung $preis für Tabelle Artikel 
# $geschenkidee für Geschnk 
# $anwendungszweck für Anwendung 


topic: ~dbsearch [] ($gosearch)

# IDEE für jetzt: Benutzen einer View
# IDEE für Später: Um richtig nutzen von der Spalte queried zu machen, EINE VIEW PRO USER.
t: Debug:Willkommen bei der Datenbanksuche
	# Erstellen der View
	if (^dbexecute(^"CREATE VIEW tab as (select * from artikel  natural join anwendung natural join geschenk)" NULL ))
		{}
	else 
		{dbexecute failed - $$db_error}
		
	# Herausfinden: Wie formuliere ich eine Queue, wenn ich praktisch nicht weiß, welche Variablen null sind un welche nicht?
	# Einzige Idee: mehrere t: anlegen je nach dem, welche daten vorhanden sind (Anfangen mit dem Fall, dass alle/die meisten daten da sind)
	# Hier zunächst: Eine Beispielqueue, um zu ermitteln, wie man queues in postgres ausführt
	
	#! Wie kann ich die Ergebnisse ausgeben? Hier: Das resultat aus Beschreibung
	#! Die Queue scheint zu funktionieren - über PGSQL gibt es kein Problem. 
	#! Sobald das vorige geklärt ist: Gefundenes Nehmen und dessen queried-Wert auf true setzen. 
	
	if (^dbexecute(^"select beschreibung from tab where geschenkidee like '%$geschenkidee%';" '^dbFirst )) 
		{}
	else 
		{dbexecute failed - $$db_error}